name: Validate workflow action

on:
  push:
    branches: [ main, '**-test' ]
  pull_request:

jobs:
  rebuid-cache:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.11', '3.7']
        gdal-version: ['v3.6.3']
        use-conda: [true, false]
        include:
          - os: macos-latest    # Simplify tests under macOS
            python-version: '3.10'
            gdal-version: 'v3.6.3'
            use-conda: false
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.python-version }}"

    - name: Set up GDAL ${{ matrix.gdal-version }}
      uses: ./.
      id: setup-gdal
      with:
        gdal-version: "${{ matrix.gdal-version }}"
        rebuild-cache: true
        use-conda: ${{ matrix.use-conda }}

    - name: Check the package
      shell: pwsh
      run: python -c "from osgeo import gdal; print(gdal.__name__)"

  # This is the same as above, but w/o "rebuild-cache: true"
  use-cache:
    needs: rebuid-cache
    timeout-minutes: ${{ matrix.timeout }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.11']
        gdal-version: ['v3.6.3']
        use-conda: [true, false]
        timeout: [5]
        include:
          - os: macos-latest      # Simplify tests under macOS
            python-version: '3.10'
            gdal-version: 'v3.6.3'
            use-conda: false
            timeout: 15           # brew install is quite slow
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.python-version }}"

    - name: Set up GDAL ${{ matrix.gdal-version }}
      uses: ./.
      id: setup-gdal
      with:
        gdal-version: "${{ matrix.gdal-version }}"
        use-conda: ${{ matrix.use-conda }}

    - name: Check the package
      shell: pwsh
      run: |
        python -m osgeo_utils.samples.gdalinfo --version
        echo "Wheel package ${{ steps.setup-gdal.outputs.wheel-path }}"
        echo "OSGeo path ${{ steps.setup-gdal.outputs.osgeo-path }}"
        echo "OSGeo utils path ${{ steps.setup-gdal.outputs.utils-path }}"

        # GDAL only
        python -c "from osgeo import gdal; print(gdal.__name__)"
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        # Additional modules (gdal_array requires numpy)
        python -m pip install numpy
        python -c ("from osgeo import gdalconst, gdal_array, gnm, ogr, osr;" +
            "print(gdalconst.__name__, gdal_array.__name__, gnm.__name__, ogr.__name__, osr.__name__)")

    - name: Check utilities
      shell: pwsh
      working-directory: ${{ steps.setup-gdal.outputs.utils-path }}
      run: |
        ForEach ($TOOL in @("./apps/gdal_translate"; "./apps/gdalwarp"; "python gdal_merge.py")) {
          echo "${TOOL}:"
          Invoke-Expression "$TOOL --version"
          if ($LASTEXITCODE) {exit $LASTEXITCODE}
        }

name: Validate workflow action

on:
  push:
    branches: [ main, '**-test' ]
  pull_request:

env:
  GDAL_VERSION: 'v3.8.1'

jobs:
  #
  # Validate GDAL build process
  #
  rebuid-cache:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.12', '3.7']
        use-conda: [true, false]
        exclude:
          - os: windows-latest
            use-conda: false    # GIS SDK may not match GDAL version
          - os: macos-latest
            python-version: 3.7
            use-conda: true     # Still "Symbol not found" issues with conda
      fail-fast: false

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.python-version }}"

    - name: Set up GDAL ${{ env.GDAL_VERSION }}
      uses: ./.
      id: setup-gdal
      with:
        gdal-version: "${{ env.GDAL_VERSION }}"
        rebuild-cache: true
        use-conda: ${{ matrix.use-conda }}

    - name: Check the package
      shell: pwsh
      run: python -c "from osgeo import gdal; print(gdal.__name__)"

  #
  # Validate cached GDAL
  #
  # This is the same as above, but w/o "rebuild-cache: true"
  use-cache:
    needs: rebuid-cache
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.12']
        use-conda: [true, false]
        exclude:
          - os: windows-latest
            use-conda: false
      fail-fast: false

    runs-on: ${{ matrix.os }}
    # Timeout to ensure cached package is used (MacOS: brew install is quite slow)
    timeout-minutes: ${{ startsWith( matrix.os, 'macos') && 15 || 5 }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: "${{ matrix.python-version }}"

    - name: Set up GDAL ${{ env.GDAL_VERSION }}
      uses: ./.
      id: setup-gdal
      with:
        gdal-version: "${{ env.GDAL_VERSION }}"
        use-conda: ${{ matrix.use-conda }}

    - name: Check the package
      shell: pwsh
      run: |
        python -m osgeo_utils.samples.gdalinfo --version
        echo "Wheel package ${{ steps.setup-gdal.outputs.wheel-path }}"
        echo "OSGeo path ${{ steps.setup-gdal.outputs.osgeo-path }}"
        echo "OSGeo utils path ${{ steps.setup-gdal.outputs.utils-path }}"

        # GDAL only
        python -c "from osgeo import gdal; print(gdal.__name__)"
        if ($LASTEXITCODE) {exit $LASTEXITCODE}

        # Additional modules (gdal_array requires numpy)
        python -m pip install numpy
        python -c ("from osgeo import gdalconst, gdal_array, gnm, ogr, osr;" +
            "print(gdalconst.__name__, gdal_array.__name__, gnm.__name__, ogr.__name__, osr.__name__)")

    - name: Check utilities
      shell: pwsh
      working-directory: ${{ steps.setup-gdal.outputs.utils-path }}
      run: |
        ForEach ($TOOL in @("./apps/gdal_translate"; "./apps/gdalwarp"; "python gdal_merge.py")) {
          echo "${TOOL}:"
          Invoke-Expression "$TOOL --version"
          if ($LASTEXITCODE) {exit $LASTEXITCODE}
        }

  #
  # Validate prebuilt NuGet packages
  #
  use-nuget:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]   # not yet macos-latest
        python-version: ['3.12']
      fail-fast: false

    env:
      cache-key-prefix: 'nuget-'

    runs-on: ${{ matrix.os }}
    # Timeout to ensure NuGet package is used (MacOS: brew install is quite slow)
    timeout-minutes: ${{ startsWith( matrix.os, 'macos') && 15 || 5 }}
    steps:
      - uses: actions/checkout@v4

      - name: Delete caches by prefix ${{ env.cache-key-prefix }}
        uses: actions/github-script@v7
        with:
          script: |
            const run = await github.rest.actions.getActionsCacheList({
              owner: context.repo.owner,
              repo: context.repo.repo,
              key: "${{ env.cache-key-prefix }}",
            })

            for (cache in run.data.actions_caches) {
              cache = run.data.actions_caches[cache]
              console.log("Deleting cache id:" + cache.id + ', key:' + cache.key +
                  ', ref:' + cache.ref + ', last used:' + cache.last_accessed_at)

              try {
                await github.rest.actions.deleteActionsCacheByKey({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  key: cache.key,
                })
              } catch (error) {
                console.log("Delete cache failed: " + error.message)
              }
            }

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"

      - name: Set up default GDAL
        uses: ./.
        id: setup-gdal
        with:
          # use default "gdal-version" and "use-conda" parameters
          cache-key-prefix: "${{ env.cache-key-prefix }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check the package
        shell: python
        env:
          PYTHONUNBUFFERED: 1
        run: |
          print(r'Wheel package ${{ steps.setup-gdal.outputs.wheel-path }}')
          print(r'OSGeo path ${{ steps.setup-gdal.outputs.osgeo-path }}')
          print(r'OSGeo utils path ${{ steps.setup-gdal.outputs.utils-path }}')
          print(r'GDAL_DATA ${{ env.GDAL_DATA }}')
          print(r'PROJ_DATA ${{ env.PROJ_DATA }}')

          from osgeo import gdal
          print('::group::GDAL VersionInfo:', gdal.VersionInfo('--version'))
          for var in gdal.VersionInfo('BUILD_INFO').split('\n'):
              print(var)
          print('::endgroup::')

          from osgeo_utils.samples import gdalinfo, ogrinfo
          print('::group::Raster formats')
          gdalinfo.main([gdalinfo.__name__, '--formats'])
          print('::endgroup::')
          print('::group::Vector formats')
          ogrinfo.main([ogrinfo.__name__, '--formats'])
          print('::endgroup::')
